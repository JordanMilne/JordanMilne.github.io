<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Crossdomain_theft | Defined Misbehaviour]]></title>
  <link href="http://JordanMilne.github.io/blog/categories/crossdomain-theft/atom.xml" rel="self"/>
  <link href="http://JordanMilne.github.io/"/>
  <updated>2014-04-12T00:27:33-03:00</updated>
  <id>http://JordanMilne.github.io/</id>
  <author>
    <name><![CDATA[Jordan Milne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yahoo's Pet Show of Horrors: Leaking a User's Emails Crossdomain]]></title>
    <link href="http://JordanMilne.github.io/2014/03/01/yahoos-pet-show-of-horrors-abusing-a-crossdomain-proxy-to-leak-a-users-email/"/>
    <updated>2014-03-01T01:12:17-04:00</updated>
    <id>http://JordanMilne.github.io/2014/03/01/yahoos-pet-show-of-horrors-abusing-a-crossdomain-proxy-to-leak-a-users-email</id>
    <content type="html"><![CDATA[<p>I&rsquo;m taking a break from browser security posts while I wait for vendors to patch, so the next few posts are probably going to be about web app security. Hopefully I should have some posts about architectural flaws in browsers / plugins by next month.</p>

<a name="Initial.Discovery"></a>
<h2>Initial Discovery</h2>

<p>Since Yahoo <a href="http://yahoodevelopers.tumblr.com/post/65622522325/the-bug-bounty-program-is-now-live">recently revamped their Responsible Disclosure program</a>, I figured I&rsquo;d have a go at finding some vulnerabilities. All of <code>*.yahoo.com</code> is in scope, and Yahoo has a <em>lot</em> of legacy behind it, so I started going through the more obscure subdomains manually. One of the subdomains I looked at a lot was <code>hk.promotions.yahoo.com</code>. It&rsquo;s a good place to look because it has lots of PHP scripts and Flash, it looks like it wasn&rsquo;t done by Yahoo&rsquo;s core devs, and most auditors aren&rsquo;t looking there since its content is mostly in Chinese.</p>

<!--more-->


<p>I ended up on <code>http://hk.promotions.yahoo.com/petshow2011/</code>, apparently a page for a Hongkongese pet show that happened in 2011:</p>

<p><a href="/images/posts/petshow/petshow0.png"><img class="center" src="/images/posts/petshow/petshow0.png" width="640" height="480"></a></p>

<p>As you can see from the request log, something on the page was requesting data from another domain through a crossdomain proxy: <code>http://hk.promotions.yahoo.com/petshow2011/php/getImages.php?file=&lt;url&gt;</code>.</p>

<p>Crossdomain proxies are generally goldmines for vulnerabilities, and this one&rsquo;s no different. First of all, it doesn&rsquo;t whitelist the URLs that we may make requests to, and the proxy is positioned inside Yahoo&rsquo;s internal network, so we can have it proxy out resources that would normally be inacessible. I tested with a <code>.corp.yahoo.com</code> URL I found on google, and ended up with some uninteresting, but normally inaccessible search statistics. Other SSRF attacks were likely posible, but I didn&rsquo;t poke it too much other than to verify that local file disclosure wasn&rsquo;t possible.</p>

<p>Second, since the proxy doesn&rsquo;t set a <code>Content-Type</code> on the response and we control the response body, we&rsquo;ve got XSS on <code>hk.promotions.yahoo.com</code> thanks to type sniffing!</p>

<p><a href="/images/posts/petshow/petshow2.png"><img class="center" src="/images/posts/petshow/petshow2.png" width="640" height="480"></a></p>

<p><a href="/images/posts/petshow/petshow3.png"><img class="center" src="/images/posts/petshow/petshow3.png"></a></p>

<a name="Escalating.Access"></a>
<h2>Escalating Access</h2>

<p>That&rsquo;s nice and all, but XSS on a mostly-static subdomain isn&rsquo;t that interesting to me. Now, remember that we control the <em>entire</em> body of the proxy&rsquo;s response and that there&rsquo;s no <code>Content-Type</code>. That means we can <em>also</em> proxy an SWF and have it be same-origin with <code>hk.promotions.yahoo.com</code>. Why&rsquo;s a SWF any more useful to us than HTML? Because of overly-permissive <a href="http://kb2.adobe.com/cps/142/tn_14213.html">crossdomain.xml rules</a>.</p>

<p>Flash checks for a <code>&lt;destination domain&gt;/crossdomain.xml</code> file before attempting a crossorigin request, to see if SWFs from the sender&rsquo;s origin may read the response (among other things, see <a href="#Further.Reading">&ldquo;Further Reading&rdquo;</a>.) For example, if you wanted to allow SWFs on any subdomain of <code>yahoo.com</code> to do crossdomain reads to your domain, you might put a rule like this in your <code>crossdomain.xml</code>:</p>

<p><code>xml
&lt;allow-access-from domain="*.yahoo.com"/&gt;
</code></p>

<p>That&rsquo;s probably overly permissive, <code>*.yahoo.com</code> is a <em>lot</em> of attack surface, but let&rsquo;s take a look at what Yahoo actually has in their <code>crossdomain.xml</code>s.</p>

<p><a href="http://finance.yahoo.com/crossdomain.xml">finance.yahoo.com</a>:</p>

<p>```xml
&lt;cross-domain-policy></p>

<pre><code>&lt;allow-access-from domain="*.yahoo.com"/&gt;
&lt;allow-access-from domain="us.js2.yimg.com"/&gt;
&lt;allow-access-from domain="*.yimg.com"/&gt;
</code></pre>

<p>&lt;/cross-domain-policy>
```</p>

<p><a href="http://www.flickr.com/crossdomain.xml">www.flickr.com</a>:</p>

<p>```xml
&lt;cross-domain-policy></p>

<pre><code>&lt;allow-access-from domain="*.yahoo.com"/&gt;
&lt;allow-access-from domain="l.yimg.com"/&gt;
&lt;allow-access-from domain="d.yimg.com"/&gt;
&lt;allow-access-from domain="s.yimg.com"/&gt;
&lt;site-control permitted-cross-domain-policies="master-only"/&gt;
</code></pre>

<p>&lt;/cross-domain-policy>
```</p>

<p><a href="http://ca-mg5.mail.yahoo.com/crossdomain.xml">ca-mg5.mail.yahoo.com</a> (webmail server, returns valid <code>crossdomain.xml</code> when logged in):</p>

<p>```xml
&lt;cross-domain-policy></p>

<pre><code>&lt;allow-access-from domain="*.yahoo.com" secure="false"/&gt;
&lt;allow-access-from domain="l.yimg.com" secure="false"/&gt;
&lt;allow-access-from domain="s.yimg.com" secure="false"/&gt;
</code></pre>

<p>&lt;/cross-domain-policy>
```</p>

<p>YMail actually has the <em>least</em> secure crossdomain policy of any of the subdomains that I checked. That <code>secure="false"</code> will allow SWFs served over HTTP to read resources only served over HTTPS, making the forced HTTPS a lot less useful. Per Adobe, <a href="http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html#articlecontentAdobe_numberedheader_0">&ldquo;Using false in an HTTPS policy file is not recommended because this compromises the security offered by HTTPS.&rdquo;</a></p>

<a name="It.s.Proxies.All.the.Way.Down"></a>
<h2>It&rsquo;s Proxies All the Way Down</h2>

<p>Well, now we know we can get an arbitrary SWF same-origin with a subdomain of <code>yahoo.com</code>, and we know that SWF can read from a number of subdomains on <code>yahoo.com</code>, let&rsquo;s get some emails!</p>

<p>First, we need to pick the SWF to proxy. The obvious choice for someone who doesn&rsquo;t know Flash well is a <a href="https://github.com/borisreitman/CrossXHR">SWF&lt;->JS XHR proxy</a>. These allow you to proxy requests from JS through a specialized SWF. Here was the result, with some overzealous redaction:</p>

<p><a href="/images/posts/petshow/petshow4.png"><img class="center" src="/images/posts/petshow/petshow4.png" width="640"></a></p>

<p>Looks like our proxied proxy works, the response body includes all of my test account&rsquo;s auth tokens and personal info. One of those tokens allows us to access a JSON endpoint that lists our e-mails:</p>

<p><a href="/images/posts/petshow/petshow6.png"><img class="center" src="/images/posts/petshow/petshow6.png" width="640"></a></p>

<p>and we can use those message IDs to pull up specific emails from the user&rsquo;s inbox:</p>

<p><a href="/images/posts/petshow/petshow7.png"><img class="center" src="/images/posts/petshow/petshow7.png" width="640"></a></p>

<p>and since we can read pages containing CSRF tokens, we can delete the user&rsquo;s emails, send emails as the current user, etc:</p>

<p><a href="/images/posts/petshow/petshow8.png"><img class="center" src="/images/posts/petshow/petshow8.png" width="640"></a></p>

<p>Funky. The most obvious application of this attack would be to determine the user&rsquo;s email, initiate a password reset on any &ldquo;interesting&rdquo; sites, read the password reset URL from their email, then delete the email; but there&rsquo;s plenty of others.</p>

<a name="The.Fix"></a>
<h2>The Fix</h2>

<p>Well, the affected page was for a Hongkongese pet show that happened in 2011, so the fix was removing the page and its associated crossdomain proxy. I&rsquo;m disappointed that the <code>crossdomain.xml</code> rules are still as loose as they are, but I don&rsquo;t think that&rsquo;s getting changed anytime soon. Subsequent reports mentioning the <code>crossdomain.xml</code> rules have been marked WONTFIX.</p>

<a name="TL.DR"></a>
<h2>TL;DR</h2>

<p>There were SSRF and crossdomain data leakage issues due to a misconfigured crossdomain proxy and overly-permissive <code>crossdomain.xml</code> rules. One was able to leak the emails of the current user, and do anything the user could do from YMail just by having them visit an attacker-controlled page.</p>

<p>This instance of the issue is fixed, but the <code>crossdomain.xml</code> rules are still overly-permissive.</p>

<a name="Disclosure.Timeline"></a>
<h2>Disclosure Timeline</h2>

<ul>
<li>Nov. 19 2013: Discovered that crossdomain proxy leaked internal resources</li>
<li>Nov. 20 2013: Reported issue to Yahoo</li>
<li>Nov. 23 2013: Updated Yahoo on the XSS / crossdomain leakage / crossdomain.xml issues</li>
<li>Nov. 25 2013: Yahoo acknowledges report</li>
<li>Nov. 29 2013: Yahoo fixes issue</li>
<li>Feb. 03 2014: Yahoo confirms report, bounty elligibility</li>
</ul>


<a name="Further.Reading"></a>
<h2>Further Reading</h2>

<ul>
<li><a href="https://gist.github.com/anonymous/5c2b1440b37d7d715592">An example of a vulnerable crossdomain proxy</a></li>
<li><a href="https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit?pli=1#">SSRF Bible</a></li>
<li><a href="http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_Flash">Flash same-origin policy primer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's That Smell? Sniffing Cross-origin Frame Content in Firefox Using Timing Attacks]]></title>
    <link href="http://JordanMilne.github.io/2014/02/05/whats-that-smell-sniffing-cross-origin-frames-in-firefox/"/>
    <updated>2014-02-05T10:12:13-04:00</updated>
    <id>http://JordanMilne.github.io/2014/02/05/whats-that-smell-sniffing-cross-origin-frames-in-firefox</id>
    <content type="html"><![CDATA[<p>Reading the blogs of <a href="http://lcamtuf.blogspot.com">lcamtuf</a> and <a href="http://scarybeastsecurity.blogspot.ca/">Chris Evans</a> is really what got me interested in browser security,
so I&rsquo;m always on the lookout for novel cross-domain data theft vectors. Today I&rsquo;m going to go into
the discovery and exploitation of such a bug: A timing attack on Firefox&rsquo;s <code>document.elementFromPoint</code> and <code>document.caretPositionFromPoint</code> implementations.</p>

<a name="Initial.Discovery"></a>
<h2>Initial Discovery</h2>

<p>I was looking at ways to automatically exploit another bug that required user interaction when I noticed <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.elementFromPoint">elementFromPoint</a> and
<a href="https://developer.mozilla.org/en-US/docs/Web/API/document.caretPositionFromPoint">caretPositionFromPoint</a> on the MDN.
Curious as to how they behaved with frames, I did a little testing.</p>

<!--more-->


<p>I made an example page to test:</p>

<p>```html
<html><body></p>

<pre><code>&lt;iframe id="testFrame" src="http://cbc.ca" width="1025"&gt;&lt;/iframe&gt;
</code></pre>

<p></body></html>
```</p>

<p><code>elementFromPoint(x,y)</code> behaved exactly as I expected, when used in the web console it returned the iframe on my page:</p>

<p>```javascript</p>

<blockquote><p>console.log(document.elementFromPoint(frame.offsetLeft + 10, frame.offsetTop + 10))
&lt; [object HTMLIFrameElement]
```</p></blockquote>

<p><code>caretPositionFromPoint(x,y)</code>, however, was returning elements from the page on cbc.ca!</p>

<p>```javascript</p>

<blockquote><p>console.log(document.caretPositionFromPoint(frame.offsetLeft + 10, frame.offsetTop + 10))
&lt; [object CaretPosition]
```
<a href="/images/posts/frompoint/obj_inspector.png"><img class="center" src="/images/posts/frompoint/obj_inspector.png"></a></p></blockquote>

<p>But there was a small snag: I couldn&rsquo;t actually access the <code>CaretPosition</code>&rsquo;s <code>offsetNode</code> from JS without getting a security exception.
It seems that Firefox noticed that <code>offsetNode</code> was being set to an element from a cross-origin document, and wrapped the <code>CaretPosition</code> object
so that I couldn&rsquo;t access any of its members from <em>my</em> document. Great.</p>

<p>However, I found I <em>could</em> access <code>offsetNode</code> when it was set to null. <code>offsetNode</code> seems to be set to null when the topmost
element at a given point is a button, and that includes scrollbar thumbs. That&rsquo;s great for us, because knowing the size and location of the frame&rsquo;s scrollbar thumb
tells us how large the framed document is, and also allows us to leak which elements exist on the page.</p>

<p>For example here&rsquo;s what we can infer about <a href="https://tomcat.apache.org/tomcat-5.5-doc/ssl-howto.html#Create_a_local_Certificate_Signing_Request_(CSR)">https://tomcat.apache.org/tomcat-5.5-doc/ssl-howto.html#Create_a_local_Certificate_Signing_Request_(CSR)</a> through its scrollbars:</p>

<p><a href="/images/posts/frompoint/nullity_test.png"><img class="center" src="/images/posts/frompoint/nullity_test.png" width="600" height="600"></a></p>

<p>The vertical scrollbar thumb has obviously moved, so we know that an element with an id of <code>Create_a_local_Certificate_Signing_Request_(CSR)</code> exists in the framed document.</p>

<p>The following function is used to test <code>offsetNode</code> accessibility at a given point in the document:</p>

<p>```javascript
function isOffsetNodeAccessibleAt(x, y) {</p>

<pre><code>try {
    document.caretPositionFromPoint(x, y).offsetNode;
} catch(e) {
    return false;
}
return true;
</code></pre>

<p>}
```</p>

<a name="Digging.Deeper"></a>
<h2>Digging Deeper</h2>

<p>Knowing the page&rsquo;s size and whether certain elements are present is nice, but I wanted more. I remembered <a href="http://contextis.co.uk/research/white-papers/pixel-perfect-timing-attacks-html5/">Paul Stone&rsquo;s excellent paper about timing attacks on browser renderers</a> and figured a timing attack might help us here.</p>

<p><code>caretPositionFromPoint</code> has to do hit testing on the document to determine what the topmost element is at a given point,
and I figured that&rsquo;s not likely to be a constant time operation. It was also clear that hit testing <em>was</em> being performed on cross-origin frame contents, since <code>caretPositionFromPoint</code> was returning elements from them.
I guessed that the time it took for a <code>caretPositionFromPoint(x,y)</code> call to return would leak information about the element at <code>(x,y)</code>.</p>

<p>To test my theory I made a script that runs <code>caretPositionFromPoint(x,y)</code> on a given point 50 times, then stores the median time that the call took to complete. Using the median is important so we can eliminate timing differences due to unrelated factors, like CPU load at the time of the call.</p>

<p>```javascript
function timeToFindPoint(x, y) {</p>

<pre><code>// window. getter is slow, apparently.
var perf = window.performance;

// Run caretPositionFromPoint() NUM_SAMPLES times and store runtime for each call.
var runTimes = new Float64Array(NUM_SAMPLES);
for(var i=0; i&lt;NUM_SAMPLES; ++i) {
    var start = perf.now();
    document.caretPositionFromPoint(x, y);
    runTimes[i] = perf.now() - start;
}

// Return the median runtime for the call
runTimes = Array.apply( [], runTimes);
runTimes.sort();

return runTimes[(NUM_SAMPLES / 2) | 0];
</code></pre>

<p>}
```</p>

<p>Once we&rsquo;ve gathered timing measurements for all of the points across the iframe, we can make a visualization of the differences:</p>

<p><a href="/images/posts/frompoint/reltime.png"><img class="center" src="/images/posts/frompoint/reltime.png" width="600" height="600"></a></p>

<p>Neat.</p>

<p>You can see a number of things in the timing data: the bounding boxes of individual elements, how the lines of text wrap, the position of the bullets in the list, etc.</p>

<p>It also seems that even though <code>elementFromPoint</code> doesn&rsquo;t return elements from the framed document, it still descends into it for its hit testing, so it&rsquo;s vulnerable to
the same timing attack as <code>caretPositionFromPoint</code>.</p>

<a name="Stealing.Text"></a>
<h2>Stealing Text</h2>

<p>So we can infer quite a bit about the framed document from the timing information, but can we actually steal text from it? Maybe, with a lot of work, depending on the page&rsquo;s styling.</p>

<p>I&rsquo;d hoped that <code>caretPositionFromPoint</code>&rsquo;s real purpose (determining what character index the caret should be at for a given point) would yield large enough timing differences to leak the width of individual characters, but that didn&rsquo;t seem to be the case.</p>

<p>Since we can tell how wide a line of text is, we can <a href="http://sirdarckcat.blogspot.com/2013/09/matryoshka-wrapping-overflow-leak-on.html#victim2">extract text using a similar method to sirdarckcat&rsquo;s</a>. First we measure how long the line is, then we make the iframe more narrow to force the text to wrap, then we subtract the new width of the the line from the old width, giving us the width of the word that just wrapped.</p>

<p>Since most sites use variable-width fonts (&ldquo;O&rdquo; and &ldquo;i&rdquo; are different widths on this blog, for example,) many small words have distinct widths that make them easy to pick out. With longer words, there may be a number of valid words with that width, however an attacker may be able to determine what word fits best using the context of the surrounding words.</p>

<p>Note that since we need to force text wrapping to get these measurements, it&rsquo;s harder to steal text from fixed-width pages, or pages that display a horizontal scrollbar instead of wrapping text (like <code>view-source:</code> URIs.) Pages that use fixed-width fonts are also more difficult to analyze because characters do not have distinct widths, we can only determine the number of characters in a word.</p>

<a name="Working.Examples"></a>
<h2>Working Examples</h2>

<p>Note that the last Firefox version these actually work in is <code>26</code>, if you want to try them out you&rsquo;ll have to find a download for it.</p>

<ul>
<li><a href="http://saynotolinux.com/tests/moz_frompoint/crossorigin_auto_domsniff_nullity.html">caretPositionFromPoint accessibility PoC</a></li>
<li><a href="http://saynotolinux.com/tests/moz_frompoint/crossorigin_auto_domsniff.html">*FromPoint timing attack PoC</a></li>
</ul>


<a name="The.Fix"></a>
<h2>The Fix</h2>

<p>Judging from <a href="https://hg.mozilla.org/mozilla-central/rev/cdbe5779c728">Robert O'Callahan&rsquo;s fix</a>, it looks like Firefox was using a general hit testing function that descended cross-document for both <code>elementFromPoint</code> and <code>caretPositionFromPoint</code>. The fix was to disable cross-document descent in the hit testing function when called by either <code>elementFromPoint</code> or <code>caretPositionFromPoint</code>.</p>

<a name="Disclosure.Timeline"></a>
<h2>Disclosure Timeline</h2>

<ul>
<li>Dec. 11 2013: Discovered <code>caretPositionFromPoint</code> leaked info through <code>offsetNode</code> accessibility</li>
<li>Dec. 13 2013: Notified Mozilla</li>
<li>Dec. 13 2013: Mozilla responds</li>
<li>Dec. 15 2013: Discovered timing info leaks in both <code>elementFromPoint</code> and <code>caretPositionFromPoint</code></li>
<li>Dec. 16 2013: Sent update to Mozilla</li>
<li>Dec. 16 2013: Mozilla responds</li>
<li>Dec. 18 2013: <a href="https://hg.mozilla.org/mozilla-central/rev/cdbe5779c728">Fix committed</a></li>
<li>Jan. 16 2014: Fix pushed to Beta channel</li>
<li>Feb. 04 2014: Fix pushed to Stable channel and <a href="https://www.mozilla.org/security/announce/2014/mfsa2014-05.html">advisory posted</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
